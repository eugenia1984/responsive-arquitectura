:root {
  --black: #000;
  --greenyellow: #adff2f;
  --orange: #fd6100;
  --orange2: #fd6100;
  --red: #f10c0c;
  --red2: #8d0403;
  --red-dark: #77030b;
  --white: #fff;
  --yellow: #feee10;
  --yello2: #ffab00;
  --yellow3: #ff8700;
}

[class^="box"] {
  background-image: linear-gradient(to top, var(--yellow), var(--yello2), var(--yellow3), var(--orange), var(--orange2), var(--red), var(--red2), var(--red-dark));
  margin: 3rem auto;
}

.box {
  width: 300px;
  height: 300px;
}

.box-flexible {
  width: 50%;
  height: 20vh;
}

.box-flexible-2 {
  max-width: 960px;
  min-width: 120px;
  max-height: 480px;
  min-height: 120px;
}

/*hay que tener cuidado al utilizar maximo y minimos y una altura  o anchura base en pixeles, aca tengo el ejemplo que al expresar en pixeles el width y el height, entonces se anulan las propiedades que antes defini con max/min-width/height*/
.box-flexible-3 {
  max-width: 960px;
  min-width: 280px;
  max-height: 480px;
  min-height: 280px;
  width: 300px;
  height: 300px;
}

/*En este caso al establecer width y height base, pero en medidas relativas si es responsiva, por el width del 50%, pero al llegar a un minimo o a un máximo si se v aa comportar como se establecio con los prefijos max y min*/
.box-flexible-4 {
  max-width: 960px;
  min-width: 280px;
  max-height: 480px;
  min-height: 280px;
  width: 50%;
  height: 20vh;
}

.box p, .box-flexible p, .box-flexible-2 p {
  color: var(--white);
  font-size: 1.25rem;
  line-height: 1.5;
  padding: 0.25rem;
  text-align: center;
}

img, iframe, video {
  max-width: 100%;
  height: auto;
}

.responsive-media {
  position: relative;
  max-width: 100%;
  height: 0;
  padding-bottom: 56,25%; /* para tener un formato wide screen 16.9 -> 16 es el 100% y 9 es el 56,25% */
}

.responsive-media > * {
  position: absolute; /*se posiciona con respecto de su contenedor padre que tiene position: relative*/
  width: 100%;
  height: 100%; /*al tener el padding bottom del 56,25 % va a tener la altura que queda*/
}

.aspect-ratio-16-9 {
  background-color: var(--red);
  aspect-ratio: 16/9;
}

.aspect-ratio-1-1 {
  padding-top: 3rem;
  aspect-ratio: 1/1;
}

@media print  {
  @page {  size: A5 landscape;}
  
  body {
    font-size: 10pt; 
    font-family: serif;
    background-color: #000;
    color: #eef10f;
  }
}

/* Por default en vez de reduce, los browsers tienen no-preference. Es para los que tienen configurado que no quiere el scroll behavior smooth */
@media screen and (prefers-reduced-motion: reduce) {
  scroll-behavior: auto;
}

/*Media query para light - dark, el modo oscruro. Aca también se puede aplicar no-preference,
salvo que en el sistema operativo ya tenga determinado el modo oscuro, entonces no se ve el efecto claro*/
/*Para geenrar estilos en modo oscuro*/
@media screen and (prefers-color-scheme: dark) {
  html {
    background-color: var(--black);
    color: var(--white);
  }
}
/*Para generar estilos en modo claro*/
@media screen and (prefers-color-scheme: light) {
  html {
    background-color: var(--white);
    color: var(--black);
  }
}

/*Para las medidas responsibles, mobile first, como los frameworks, estilo bootstrap*/
/*Mobile First, se usa min-width*/
@media screen and (min-width: 480px) {
  html {  background-color: rgba(255, 182, 193, 0.795);}
}
/*Desktop First, se usa max-width: @media screen and (max-width: 1024px) {...}*/
/* Un ejemplo
@media screen and (max-width: 480px) {
  html {
    background-color: greenyellow;
  }
} 
*/

/*Para aplicar el estilo cuando SI soporte una determinada caracterísitca, en este caso: subgrid*/
@supports (grid-template-columns: subgrid) {
  html {
    background-color: var(--black);
    color: var(--greenyellow);
  }
}

/*Para aplicar estilos cuando NO soporta una determinada característica*/
@supports not (grid-template-columns: subgrid) {
  html {
    background-color: var(--white);
    color: var(--red-dark);
  }
}

/*Se va a ver en FireFox que soporta ambas*/
@suports (display:grid) and (grid-template-columns:subgrid) {
  html {
    background-color: darkslateblue;
    color: lightseagreen;
  }
}

/*Se va a ver tanto en FireFox, como en Chrome, porque al poner el OR debe cumplir con al menos una, por eso afecta a Chrome*/
@suports (display:grid) or (grid-template-columns:subgrid) {
  html {
    background-color: var(--white);
    color: var(--black);
  }
}